/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PackageMgInterface extends utils.Interface {
  functions: {
    "createPackage(string)": FunctionFragment;
    "getRelease(string,string)": FunctionFragment;
    "nameToPackage(string)": FunctionFragment;
    "releaseNewVersion(string,string,string,bool)": FunctionFragment;
    "setDefaultVersion(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPackage"
      | "getRelease"
      | "nameToPackage"
      | "releaseNewVersion"
      | "setDefaultVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPackage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelease",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nameToPackage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseNewVersion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameToPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseNewVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultVersion",
    data: BytesLike
  ): Result;

  events: {
    "DefaultVersionChanged(string,string)": EventFragment;
    "PackageCreated(address,string)": EventFragment;
    "PackageVersionCreated(string,string,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultVersionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageVersionCreated"): EventFragment;
}

export interface DefaultVersionChangedEventObject {
  pkgName: string;
  versionName: string;
}
export type DefaultVersionChangedEvent = TypedEvent<
  [string, string],
  DefaultVersionChangedEventObject
>;

export type DefaultVersionChangedEventFilter =
  TypedEventFilter<DefaultVersionChangedEvent>;

export interface PackageCreatedEventObject {
  owner: string;
  pkgName: string;
}
export type PackageCreatedEvent = TypedEvent<
  [string, string],
  PackageCreatedEventObject
>;

export type PackageCreatedEventFilter = TypedEventFilter<PackageCreatedEvent>;

export interface PackageVersionCreatedEventObject {
  pkgName: string;
  versionName: string;
  dataHash: string;
  changeDefaultVersion: boolean;
}
export type PackageVersionCreatedEvent = TypedEvent<
  [string, string, string, boolean],
  PackageVersionCreatedEventObject
>;

export type PackageVersionCreatedEventFilter =
  TypedEventFilter<PackageVersionCreatedEvent>;

export interface PackageMg extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PackageMgInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPackage(
      packageName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRelease(
      pkgName: PromiseOrValue<string>,
      pkgVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nameToPackage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; defaultVersion: string }>;

    releaseNewVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      dataHash: PromiseOrValue<string>,
      isDefault: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPackage(
    packageName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRelease(
    pkgName: PromiseOrValue<string>,
    pkgVersion: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  nameToPackage(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { owner: string; defaultVersion: string }>;

  releaseNewVersion(
    packageName: PromiseOrValue<string>,
    versionName: PromiseOrValue<string>,
    dataHash: PromiseOrValue<string>,
    isDefault: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultVersion(
    packageName: PromiseOrValue<string>,
    versionName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPackage(
      packageName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRelease(
      pkgName: PromiseOrValue<string>,
      pkgVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    nameToPackage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; defaultVersion: string }>;

    releaseNewVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      dataHash: PromiseOrValue<string>,
      isDefault: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DefaultVersionChanged(string,string)"(
      pkgName?: null,
      versionName?: null
    ): DefaultVersionChangedEventFilter;
    DefaultVersionChanged(
      pkgName?: null,
      versionName?: null
    ): DefaultVersionChangedEventFilter;

    "PackageCreated(address,string)"(
      owner?: null,
      pkgName?: null
    ): PackageCreatedEventFilter;
    PackageCreated(owner?: null, pkgName?: null): PackageCreatedEventFilter;

    "PackageVersionCreated(string,string,string,bool)"(
      pkgName?: null,
      versionName?: null,
      dataHash?: null,
      changeDefaultVersion?: null
    ): PackageVersionCreatedEventFilter;
    PackageVersionCreated(
      pkgName?: null,
      versionName?: null,
      dataHash?: null,
      changeDefaultVersion?: null
    ): PackageVersionCreatedEventFilter;
  };

  estimateGas: {
    createPackage(
      packageName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRelease(
      pkgName: PromiseOrValue<string>,
      pkgVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameToPackage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseNewVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      dataHash: PromiseOrValue<string>,
      isDefault: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPackage(
      packageName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRelease(
      pkgName: PromiseOrValue<string>,
      pkgVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nameToPackage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseNewVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      dataHash: PromiseOrValue<string>,
      isDefault: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultVersion(
      packageName: PromiseOrValue<string>,
      versionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
